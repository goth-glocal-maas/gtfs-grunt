# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible
from django.contrib.gis.db.models import (
    Model, CharField, IntegerField, DateField, BooleanField, ForeignKey,
    LineStringField, EmailField, PointField, DecimalField, TimeField,
)
from django.utils import timezone
from collections import OrderedDict


class CompanyBoundModel(Model):
    company = ForeignKey('people.Company')

    class Meta:
        abstract = True

    @property
    def gtfs_header(self):
        raise NotImplementedError("Please Implement this property")


@python_2_unicode_compatible
class Agency(CompanyBoundModel):
    """Transit agencies that provide the data in this feed.

    """
    agency_id = CharField('agency_id', max_length=25)
    name = CharField('Agency Name', max_length=500)
    url = CharField('Agency URL', max_length=240, blank=True)
    timezone = CharField('Agency Timezone', max_length=50, blank=True)
    phone = CharField('Agency Phone', max_length=50, blank=True)
    lang = CharField('Agency Language', max_length=10, blank=True)
    fare_url = CharField('Agency URL', max_length=240, blank=True)
    email = EmailField('Email', blank=True)

    class Meta:
        unique_together = ('company', 'agency_id')
        verbose_name_plural = "agencies"

    def __str__(self):
        return self.agency_id

    @property
    def gtfs_header(self):
        return 'agency_id,agency_name,agency_url,agency_timezone,' \
            'agency_phone,agency_lang,agency_fare_url,agency_email'

    def gtfs_format(self):
        data = [
            ('agency_id', self.agency_id),
            ('agency_name', self.name),
            ('agency_url', self.url),
            ('agency_timezone', self.timezone),
            ('agency_phone', self.phone),
            ('agency_lang', self.lang),
            ('agency_fare_url', self.fare_url),
            ('agency_email', self.email),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class Stop(CompanyBoundModel):
    """Individual locations where vehicles pick up or drop off passengers.

    "stop_id", "stop_code", "stop_name", "stop_desc", "stop_lat",
		"stop_lon", "zone_id", "stop_url", "location_type", "parent_station",
		"direction", "position"

    stop_id,stop_name,stop_desc,stop_lat,stop_lon,stop_url,location_type,parent_station

    """
    stop_id = CharField('stop_id', max_length=25)
    name = CharField('name', max_length=500)
    location = PointField('Location')
    # optinal
    stop_code = CharField('Stop code', max_length=100, blank=True)
    stop_desc = CharField('Stop code', max_length=500, blank=True)
    zone_id = CharField('Zone ID', max_length=100, blank=True)
    LOCATION_TYPES = (
        ('0', 'Stop'),
        ('1', 'Station'),
        ('2', 'Station Entrance/Exit'),
    )
    location_type = CharField('Location types', max_length=1,
                              default='0', choices=LOCATION_TYPES)
    parent_station = ForeignKey('Stop', null=True, blank=True)
    stop_timezone = CharField('Stop timezone', max_length=20, blank=True)
    WHEELCHAIR_CHOICES = (
        ('0', 'No wheelchair accessibility'),
        ('1', 'at least some vehicles at this stop can be boarded ' \
              'by a rider in a wheelchair'),
        ('2', 'wheelchair boarding is not possible at this stop'),
    )
    wheelchair_boarding = CharField('Wheelchair boarding', max_length=1,
                                    default='0', choices=WHEELCHAIR_CHOICES)

    class Meta:
        unique_together = ('company', 'stop_id')

    def __str__(self):
        return self.stop_id

    @property
    def gtfs_header(self):
        return 'stop_id,stop_name,stop_desc,stop_lat,stop_lon,zone_id,' \
            'stop_url,location_type,parent_station,direction,position'

    def gtfs_format(self):
        data = [
            ('stop_id', self.stop_id),
            ('stop_name', self.name),
            ('stop_desc', self.stop_desc),
            ('stop_lat', self.location.coords[1]),
            ('stop_lon', self.location.coords[0]),
            ('zone_id', self.zone_id),
            ('stop_url', ''),
            ('location_type', self.location_type),
            ('parent_station', self.parent_station.stop_id),
            ('direction', ''),
            ('position', ''),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class Route(CompanyBoundModel):
    """Transit routes. A route is a group of trips that are displayed to riders
    as a single service.

    # GTFS Feed

    ## routes.txt

    This is obvious, basic fields

        "route_id", "agency_id", "route_short_name", "route_long_name",
		"route_desc", "route_type", "route_url", "route_color",
		"route_text_color"

    ## shapes.txt

    This is generated by `self.shapes` for `trips.txt`

    ### required

    shape_id,
    shape_pt_lat,
    shape_pt_lon,
    shape_pt_sequence,

    ### optional

    shape_dist_traveled (in km)


    """
    route_id = CharField('route_id', max_length=25)
    short_name = CharField('short name', max_length=150)
    long_name = CharField('long name', max_length=500)
    shapes = LineStringField(srid=4326, null=True, blank=True)

    agency = ForeignKey('Agency', blank=True, null=True)
    desc = CharField('Route desc', max_length=250, blank=True)
    ROUTE_TYPES = (
        ('0', 'Tram, Streetcar, Light rail'),
        ('1', 'Subway, Metro. Any underground rail system ' \
              'within a metropolitan area.'),
        ('2', 'Rail'),
        ('3', 'Bus'),
        ('4', 'Ferry'),
        ('5', 'Cable car'),
        ('6', 'Gondola, Suspended cable car'),
        ('7', 'Funicular. Any rail system designed for steep inclines.'),
    )
    route_type = CharField('Route type', max_length=1,
                           default='2', choices=ROUTE_TYPES)
    route_url = CharField('Route URL', max_length=240, blank=True)
    route_color = CharField('Route color', max_length=6, blank=True)
    route_text_color = CharField('Route text color', max_length=6, blank=True)
    route_sort_order = IntegerField('Route sort order', default=0, blank=True)

    class Meta:
        unique_together = ('company', 'route_id')
        ordering = ('agency', 'route_id')

    def __str__(self):
        return self.route_id

    @property
    def gtfs_header(self):
        return 'route_type,route_id,route_short_name,route_long_name,' \
        'agency_id,route_url,route_color,route_text_color,route_sort_order'

    @property
    def routes_gtfs_header(self):
        return self.gtfs_header

    @property
    def shapes_gtfs_header(self):
        return 'shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence'

    def gtfs_format(self):
        data = [
            ('route_type', self.route_type),
            ('route_id', self.route_id),
            ('route_short_name', self.short_name),
            ('route_long_name', self.long_name),
            ('agency_id', self.agency.agency_id),
            ('route_url', self.route_url),
            ('route_color', self.route_color.upper()),
            ('route_text_color', self.route_text_color.upper()),
            ('route_sort_order', str(self.route_sort_order)),
        ]
        return OrderedDict(data)

    def export_to_shapes(self):
        """Export to shapes

        Output:
        list of dict for shapes.txt
        """
        if not self.shapes:
            return []
        results = []
        seq = 1
        for o in self.shapes.coords:
            _ = [
                ('shape_id', self.route_id),
                ('shape_pt_lat', o[1]),
                ('shape_pt_lon', o[0]),
                ('shape_pt_sequence', seq),
            ]
            seq += 1
            results.append(OrderedDict(_))
        return results


@python_2_unicode_compatible
class StopTime(CompanyBoundModel):
    """
    "trip_id", "arrival_time", "departure_time", "stop_id", "stop_sequence",
		"stop_headsign", "pickup_type", "drop_off_type", "shape_dist_traveled",
		"timepoint", "continuous_drop_off", "continuous_pickup"

    """
    trip = CharField('route_id', max_length=25)
    short_name = CharField('short name', max_length=150)
    long_name = CharField('long name', max_length=500)

    class Meta:
        verbose_name_plural = "Stop times"

    def __str__(self):
        return '%s' % self.pk


@python_2_unicode_compatible
class Calendar(CompanyBoundModel):
    """This indicates normal service set
    """
    service_id = CharField('service_id', max_length=25, unique=True)
    start_date = DateField('Start Date', default=timezone.now)
    end_date = DateField('Start Date', default=timezone.now)
    monday = BooleanField('Monday', default=False)
    tuesday = BooleanField('Tuesday', default=False)
    wednesday = BooleanField('Wednesday', default=False)
    thursday = BooleanField('Thursday', default=False)
    friday = BooleanField('Friday', default=False)
    saturday = BooleanField('Saturday', default=False)
    sunday = BooleanField('Sunday', default=False)

    class Meta:
        unique_together = ('company', 'service_id')

    def __str__(self):
        return self.service_id

    @property
    def gtfs_header(self):
        return 'service_id,monday,tuesday,wednesday,thursday,friday,' \
            'saturday,sunday,start_date,end_date'

    def gtfs_format(self):
        data = [
            ('service_id', self.service_id),
            ('monday', self.monday),
            ('tuesday', self.tuesday),
            ('wednesday', self.wednesday),
            ('thursday', self.thursday),
            ('friday', self.friday),
            ('saturday', self.saturday),
            ('sunday', self.sunday),
            ('start_date', self.start_date.strftime('%Y-%m-%d')),
            ('end_date', self.end_date.strftime('%Y-%m-%d')),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class CalendarDate(CompanyBoundModel):
    """This is an exception for Calendar
    """
    EXCEPTION_TYPES = (
        ('1', 'Add to service'),
        ('2', 'Remove from service'),
    )
    service = ForeignKey(Calendar)
    date = DateField('Date')
    exception_type = CharField('Exception Type', max_length=1,
                               default='2',
                               choices=EXCEPTION_TYPES)

    class Meta:
        verbose_name_plural = "Calendar Dates"

    def __str__(self):
        return '%s-%s' % (self.pk, self.date)

    @property
    def gtfs_header(self):
        return 'service_id,date,exception_type'

    def gtfs_format(self):
        data = [
            ('service_id', self.service.service_id),
            ('date', self.date.strftime('%Y-%m-%d')),
            ('exception_type', self.exception_type),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class Trip(CompanyBoundModel):
    """
    route_id,service_id,trip_id,trip_headsign,block_id
    """
    route = ForeignKey(
        Route,
        related_query_name='trip_route',
        related_name='trip_route',
    )
    service = ForeignKey(Calendar)
    trip_id = CharField('trip_id', max_length=50)
    short_name = CharField('short name', max_length=150)
    long_name = CharField('long name', max_length=500)

    def __str__(self):
        return self.trip_id


@python_2_unicode_compatible
class FareAttribute(CompanyBoundModel):
    """Fare information for a transit organization's routes.

    currency_type          e.g. USD, THB
                           http://en.wikipedia.org/wiki/ISO_4217
    transfer_duration      When used with a transfers value of 0, the
                           transfer_duration field indicates how long a ticket
                           is valid for a fare where no transfers are allowed.
                           Unless you intend to use this field to indicate
                           ticket validity, transfer_duration should be omitted
                           or empty when transfers is set to 0.
    """
    fare_id = CharField('trip_id', max_length=50)
    price = DecimalField('Price', default=0.0, decimal_places=2, max_digits=6)
    currency_type = CharField('Currency type', max_length=3)
    PAYMENT_CHOICES = (
        ('0', 'Fare is paid on board'),
        ('1', 'Fare must be paid before boarding')
    )
    payment_method = CharField('Payment method', max_length=1, default='0',
                               choices=PAYMENT_CHOICES)
    TRANSFER_CHOICES = (
        ('', 'unlimited transfers are permitted.'),
        ('0', 'No transfers permitted on this fare.'),
        ('1', 'Passenger may transfer once.'),
        ('2', 'Passenger may transfer twice.'),
    )
    transfer = CharField('Transfer', max_length=1, default='0',
                         choices=TRANSFER_CHOICES)
    # optional
    agency = ForeignKey('Agency', null=True, blank=True,
        related_name='fare_agency'
    )
    transfer_duration = CharField('Transfer duration', max_length=2)

    class Meta:
        unique_together = ('company', 'fare_id')

    def __str__(self):
        return self.pk

    @property
    def gtfs_header(self):
        return 'fare_id,price,currency_type,payment_method,transfers,' \
            'transfer_duration'

    def gtfs_format(self):
        data = [
            ('fare_id', self.fare.fare_id),
            ('price', self.route.route_id),
            ('currency_type', self.currency_type),
            ('payment_method', self.payment_method),
            ('transfers', self.transfer),
            ('agency_id', self.agency.agency_id),
            ('transfer_duration', self.transfer_duration),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class FareRule(CompanyBoundModel):
    """The fare_rules table allows you to specify how fares in
    fare_attributes.txt apply to an itinerary. Most fare structures use some
    combination of the following rules:

    * Fare depends on origin or destination stations.
    * Fare depends on which zones the itinerary passes through.
    * Fare depends on which route the itinerary uses.

    https://code.google.com/archive/p/googletransitdatafeed/wikis/FareExamples.wiki
    """
    fare = ForeignKey('FareAttribute')

    '''optional

    it's overly complicated for zoning thing
    https://developers.google.com/transit/gtfs/reference/#fare_attributestxt
    '''
    route = ForeignKey('Route', related_name='farerule_route')
    # origin_id = CharField('Origin ID', max_length=100)
    # destination_id = CharField('Destination ID', max_length=100)
    # contains_id = CharField('Contains ID', max_length=100)

    def __str__(self):
        return self.pk

    @property
    def gtfs_header(self):
        return 'fare_id,route_id,origin_id,destination_id,contains_id'

    def gtfs_format(self):
        data = [
            ('fare_id', self.fare.fare_id),
            ('route_id', self.route.route_id),
            ('origin_id', ''),
            ('destination_id', ''),
            ('contains_id', ''),
        ]
        return OrderedDict(data)


@python_2_unicode_compatible
class Frequency(CompanyBoundModel):
    """Headway (time between trips) for routes with variable frequency of
    service.

    This will be used instead of writing so many stop_times.txt; however,
    transitfeed.ScheduleViewer can't verified or display them yet.

    headway_secs    the time between departures from the same stop (headway)
                    for this trip type, during the time interval specified by
                    start_time and end_time. The headway value must be entered
                    in seconds.
    """
    trip = ForeignKey('Trip')
    start_time = TimeField('Start time')
    end_time = TimeField('End time')
    headway_secs = IntegerField('Headway seconds', )
    # optional
    EXACT_TIME_CHOICES = (
        ('0', 'Frequency-based trips are not exactly scheduled.'),
        ('1', 'Frequency-based trips are exactly scheduled'),
        # For a frequencies.txt row, trips are scheduled starting with
        # trip_start_time = start_time + x * headway_secs for all x in
        # (0, 1, 2, ...) where trip_start_time < end_time.
    )
    exact_times = CharField(
        'Exact times', max_length=1, default='0', choices=EXACT_TIME_CHOICES)

    class Meta:
        verbose_name_plural = "Frequencies"

    def __str__(self):
        return self.pk
